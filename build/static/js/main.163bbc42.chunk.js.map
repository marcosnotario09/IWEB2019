{"version":3,"sources":["redux/actions.js","redux/reducers.js","Components/Button.js","Components/Actionbar.js","Components/Question.js","Components/Answer.js","Components/Image.js","Components/Tips.js","Components/ImageAuthor.js","Components/Author.js","Components/Content.js","Components/Game.js","Components/Navbar.js","App.js","redux/ReduxProvider.js","serviceWorker.js","index.js"],"names":["QUESTION_ANSWER","INIT_QUESTIONS","CHANGE_QUESTION","SUBMIT","TIMER","RESET","FETCHING","initQuestions","questions","type","payload","submit","fetching","status","GlobalState","combineReducers","score","state","action","map","undefined","userAnswer","answer","toUpperCase","finished","time","currentQuestion","index","question","i","timer","Button","className","onClick","props","value","onChangeQuestion","questionIndex","onSubmit","resetQuestions","this","React","Component","Actionbar","Question","Answer","placeholder","onChange","e","onQuestionAnswer","target","Image","src","url","alt","width","height","Tips","tips","tip","key","ImageAuthor","Author","username","Content","attachment","author","photo","Game","Navbar","App","dispatch","fetchQuestions","setInterval","fetch","then","resp","json","catch","error","console","log","endTimer","questionAnswer","changeQuestion","onInitQuestions","connect","ReduxProvider","initialState","store","configureStore","style","createStore","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.163bbc42.chunk.js","sourcesContent":["\r\nexport const QUESTION_ANSWER = 'QUESTION_ANSWER';\r\nexport const INIT_QUESTIONS='INIT_QUESTIONS';\r\nexport const CHANGE_QUESTION = 'CHANGE_QUESTION';\r\nexport const SUBMIT = 'SUBMIT';\r\nexport const TIMER = 'TIMER';\r\nexport const RESET = 'RESET';\r\nexport const FETCHING ='FETCHING';\r\n\r\n\r\nexport function initQuestions(questions) {\r\n    return {type: INIT_QUESTIONS, payload: { questions }};\r\n}\r\nexport function submit(questions) {\r\n    return {type: SUBMIT, payload: { questions } };\r\n}\r\nexport function changeQuestion(index){\r\n    return {type: CHANGE_QUESTION, payload: { index  }};\r\n}\r\nexport function questionAnswer(index, answer) {\r\n    return { type: QUESTION_ANSWER, payload: { index, answer } };\r\n}\r\nexport function timer(time){\r\n    return { type: TIMER, payload: { time } };\r\n}\r\nexport function fetching(status) {\r\n    return { type: FETCHING, payload: { status } };\r\n}\r\nexport function reset(){\r\n    return { type: RESET}\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport { QUESTION_ANSWER } from \"./actions\";\r\nimport { INIT_QUESTIONS } from \"./actions\";\r\nimport { CHANGE_QUESTION } from \"./actions\";\r\nimport { SUBMIT } from \"./actions\";\r\nimport { TIMER} from \"./actions\";\r\nimport { RESET } from \"./actions\";\r\nimport { FETCHING } from \"./actions\";\r\n\r\n\r\nfunction score(state = 0, action = {}) {\r\n    let score ;\r\n    switch(action.type) {\r\n        case SUBMIT:\r\n            score = state;\r\n            action.payload.questions.map((questions)=> {\r\n                if (!(questions.userAnswer === undefined)){\r\n                    if (questions.answer.toUpperCase() === questions.userAnswer.toUpperCase()){\r\n                       score  = score +1;\r\n                    }\r\n                    }\r\n            });\r\n                return score ;\r\n        case RESET:\r\n            return 0;\r\n        case INIT_QUESTIONS:\r\n            return 0;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction finished(state = false, action = {}) {\r\n    switch(action.type) {\r\n        case SUBMIT:\r\n            return true;\r\n        case INIT_QUESTIONS:\r\n            return false;\r\n        case TIMER:\r\n            if(action.payload.time ===0){\r\n                return true;\r\n            }\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction currentQuestion(state = 0, action = {}) {\r\n    \r\n    switch(action.type) {\r\n        case CHANGE_QUESTION:\r\n            if (action.payload.index < 10 && action.payload.index > -1) {\r\n               state = action.payload.index;\r\n               return state;\r\n           }else{\r\n              return state;\r\n           }\r\n        case INIT_QUESTIONS:\r\n            return 0;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction questions(state = [], action = {}) {\r\n    switch(action.type) {\r\n        case QUESTION_ANSWER:\r\n            return state.map((question,i) =>  {\r\n                return { ...question,\r\n                            userAnswer: action.payload.index === i ?\r\n                                        action.payload.answer : question.userAnswer}\r\n            });\r\n        case INIT_QUESTIONS:\r\n            return action.payload.questions;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nfunction fetching(state = false, action={}){\r\n    switch(action.type) {\r\n        case FETCHING:\r\n            return action.payload.status;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nfunction timer(state = 120, action={}) {\r\n    switch(action.type) {\r\n    case SUBMIT:\r\n        return 0;\r\n    case TIMER:\r\n        return state - 1;\r\n     case INIT_QUESTIONS:\r\n        return 120;\r\n    default:\r\n        return state;\r\n    }\r\n\r\n}\r\nconst GlobalState = (combineReducers({\r\n    score,\r\n    finished,\r\n    currentQuestion,\r\n    questions,\r\n    fetching,\r\n    timer\r\n}));\r\n\r\nexport default GlobalState;","import React from 'react';\r\n\r\nexport default class Button extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Button\">\r\n                <button type=\"button\" onClick={()=>{\r\n                    switch (this.props.value) {\r\n                        case'Atras':\r\n                            return this.props.onChangeQuestion(this.props.questionIndex - 1);\r\n                        case'Terminar':\r\n                            return this.props.onSubmit();\r\n                        case'Siguiente':\r\n                            return this.props.onChangeQuestion(this.props.questionIndex + 1);\r\n                        case 'Volver a jugar':\r\n                            return this.props.resetQuestions();\r\n                        default:\r\n                            return 0;\r\n                    }\r\n                }}>{this.props.value || ''} </button>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport Button from './Button';\r\n\r\nexport default class Actionbar extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"ActionBar\">\r\n                <ul>\r\n                <p>\r\n                    <Button value={\"Siguiente\"} questionIndex = {this.props.questionIndex} \r\n                                onChangeQuestion={this.props.onChangeQuestion}/>\r\n                </p>  \r\n                \r\n                 <p>\r\n                    <Button value={\"Terminar\"} questions = {this.props.questions} \r\n                                onSubmit={this.props.onSubmit}/>\r\n                </p>  \r\n\r\n                <p>\r\n                    <Button value={\"Atras\"} questionIndex = {this.props.questionIndex} \r\n                                onChangeQuestion={this.props.onChangeQuestion}/>\r\n                </p>   \r\n            </ul>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class Question extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Question\">\r\n                <h3>{this.props.question}</h3>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class Answer extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Answer\">\r\n                <input type=\"text\" placeholder= 'Introduce la respuesta' value={this.props.question.userAnswer || ''}\r\n                       onChange={(e)=>{ this.props.onQuestionAnswer(e.target.value);}}/>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class Image extends React.Component {\r\n    render() {\r\n        return (\r\n             <div className=\"Image\">\r\n                    <img src= {this.props.url} alt={this.props.url}\r\n                   \t\t width={\"35%\"}\r\n                    \t height={\"35%\"}\r\n                     />\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport  '../App.css';\r\nexport default class Tips extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Tips\">\r\n                <h4>{this.props.tips.map((tip,index)=>{\r\n                    return <li key={index}>{tip}</li>\r\n                })}</h4>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\n\r\nexport default class ImageAuthor extends React.Component {\r\n    render() {\r\n        return (\r\n             <div className=\"Image2\">\r\n                    <img src= {this.props.url} alt={this.props.url} \r\n                         width={\"25%\"}\r\n                    \t height={\"25%\"}\r\n                    />\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class Author extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Author\">\r\n                <h3> Autor: {this.props.username}</h3>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport Question from './Question';\r\nimport Answer from './Answer';\r\nimport Image from './Image';\r\nimport Tips from './Tips'\r\nimport ImageAuthor from './ImageAuthor'\r\nimport Author from './Author'\r\n\r\n\r\nexport default class Content extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Question question = {this.props.question.question}/>\r\n                <Answer question = {this.props.question} onQuestionAnswer = {this.props.onQuestionAnswer}/>\r\n                <Tips tips={this.props.question.tips}/>\r\n                <Image url = {this.props.question.attachment.url } />\r\n                <ImageAuthor url = {this.props.question.author.photo.url} />\r\n                <Author username = {this.props.question.author.username}/>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport Actionbar from './Actionbar';\r\nimport Content from './Content';\r\n\r\nexport default class Game extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <Content question = {this.props.question}  onQuestionAnswer = {this.props.onQuestionAnswer} />\r\n                </div>\r\n                <div>\r\n                    <Actionbar questionIndex={this.props.questionIndex} \r\n                               onChangeQuestion = {this.props.onChangeQuestion} \r\n                               onSubmit={this.props.onSubmit}/>\r\n                </div>\r\n\r\n\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class Navbar extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Header\">\r\n                <h1>Quiz Game</h1>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport { connect } from 'react-redux';\nimport Game from \"./Components/Game\";\nimport Button from \"./Components/Button\";\nimport Navbar from \"./Components/Navbar\";\nimport { questionAnswer } from './redux/actions';\nimport { initQuestions } from './redux/actions';\nimport { changeQuestion } from './redux/actions';\nimport { submit } from './redux/actions';\nimport { timer } from './redux/actions';\nimport { reset } from './redux/actions';\nimport { fetching } from './redux/actions';\n\n\nclass App extends Component {\n\n    componentDidMount(){\n        this.props.dispatch(fetching(true));\n        this.fetchQuestions();\n        setInterval(()=>{\n            this.props.dispatch(timer());\n        },1000)\n    }\n \n    fetchQuestions(){\n        fetch('https://quiz.dit.upm.es/api/quizzes/random10wa?token=638220fae031a10e5868').then((resp)=>\n                resp.json()).then(json=> {\n            this.props.dispatch(initQuestions(json));\n            this.props.dispatch(fetching(false));\n        }).catch(error => console.log(error));\n\n    }\n    endTimer(){\n        this.props.dispatch(submit(this.props.questions));\n    }\n\n  render() {\n      if (!this.props.finished) {\n          if (this.props.fetching){\n              return(\n              <div>\n                    <h1>Cargando las preguntas...</h1>\n              </div>\n              )\n          }else{\n              console.log(this.props.questions);\n              return (\n                  <div className=\"Timer\">\n                      <Navbar score={this.props.score}/>\n                     \n                        <h1>Tiempo restante: {this.props.timer === 0 ? this.endTimer() : this.props.timer} segundos </h1>\n                          <h2>Question: {this.props.questionIndex}</h2><Game question={this.props.questions[this.props.currentQuestion]}\n                            questionIndex={this.props.currentQuestion}\n                            onQuestionAnswer={(answer) => {\n                                this.props.dispatch(questionAnswer(this.props.currentQuestion, answer))\n                            }}\n                            onChangeQuestion={(index) => {\n                                this.props.dispatch(changeQuestion(index))\n                            }}\n                            onSubmit={() => {\n                                this.props.dispatch(submit(this.props.questions))\n                            }}\n                            onInitQuestions={(questions) => {\n                                this.props.dispatch(initQuestions(questions))\n                            }}\n                      />\n\n                  </div>\n              );\n          }\n      }else{\n          return(\n              <div className=\"Result\">\n\n                 <h1>Tu puntuación es de: {this.props.score} puntos </h1>\n                    <h2> Tus respuestas: </h2>\n                  {this.props.questions.map((question,index)=>{\n                      return  <li key={index}><class className=\"Resume\">{index+1}.- {question.question}: </class>\n                                { question.userAnswer === undefined ? \"Sin responder\" : \n                                question.answer.toUpperCase() === question.userAnswer.toUpperCase() ? \"ACIERTO\" : \"ERROR\"}</li>\n                  })}\n                  <p><Button value='Volver a jugar' resetQuestions={() => {\n                      this.props.dispatch(reset());\n                      this.props.dispatch(fetching(true));\n                      this.fetchQuestions();\n                  }}/></p>\n              </div>\n          )\n      }\n  }\n}\n\nfunction mapStateToProps(state) {\n  return { \n    ...state\n  };\n}\n\nexport default connect(mapStateToProps)(App);\n","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport GlobalState from './reducers';\r\nimport { createStore } from \"redux\";\r\nimport App from '../App';\r\n//import { questions } from \"../assets/mock-data\";\r\n\r\nexport default class ReduxProvider extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.initialState = {\r\n            score: 0,\r\n            finished: false,\r\n            currentQuestion: 0,\r\n            questions: [],\r\n            fetching: true,\r\n            timer:80\r\n        };\r\n        this.store = this.configureStore();\r\n    }\r\n    render() {\r\n        return (\r\n            <Provider store={this.store}>\r\n                <div style={{height:'100%'}} >\r\n                    <App />\r\n                </div>\r\n            </Provider>\r\n        );\r\n    }\r\n\r\n    configureStore() {\r\n        return createStore(GlobalState, this.initialState);\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport ReduxProvider from './redux/ReduxProvider';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<ReduxProvider />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}